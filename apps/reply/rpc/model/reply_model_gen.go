// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	replyFieldNames          = builder.RawFieldNames(&Reply{})
	replyRows                = strings.Join(replyFieldNames, ",")
	replyRowsExpectAutoSet   = strings.Join(stringx.Remove(replyFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	replyRowsWithPlaceHolder = strings.Join(stringx.Remove(replyFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	replyModel interface {
		Insert(ctx context.Context, data *Reply) (sql.Result, error)
		FindOne(ctx context.Context, id uint64) (*Reply, error)
		Update(ctx context.Context, data *Reply) error
		Delete(ctx context.Context, id uint64) error
	}

	defaultReplyModel struct {
		conn  sqlx.SqlConn
		table string
	}

	Reply struct {
		Id            uint64    `db:"id"`              // 评论表id
		Business      string    `db:"business"`        // 评论业务类型
		Targetid      uint64    `db:"targetid"`        // 评论目标id
		ReplyUserid   uint64    `db:"reply_userid"`    // 回复用户id
		BeReplyUserid uint64    `db:"be_reply_userid"` // 被回复用户id
		Parentid      uint64    `db:"parentid"`        // 父评论id
		Content       string    `db:"content"`         // 评论内容
		Image         string    `db:"image"`           // 评论图片
		CreateTime    time.Time `db:"create_time"`     // 创建时间
		UpdateTime    time.Time `db:"update_time"`     // 更新时间
	}
)

func newReplyModel(conn sqlx.SqlConn) *defaultReplyModel {
	return &defaultReplyModel{
		conn:  conn,
		table: "`reply`",
	}
}

func (m *defaultReplyModel) Delete(ctx context.Context, id uint64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultReplyModel) FindOne(ctx context.Context, id uint64) (*Reply, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", replyRows, m.table)
	var resp Reply
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultReplyModel) Insert(ctx context.Context, data *Reply) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?)", m.table, replyRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Business, data.Targetid, data.ReplyUserid, data.BeReplyUserid, data.Parentid, data.Content, data.Image)
	return ret, err
}

func (m *defaultReplyModel) Update(ctx context.Context, data *Reply) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, replyRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.Business, data.Targetid, data.ReplyUserid, data.BeReplyUserid, data.Parentid, data.Content, data.Image, data.Id)
	return err
}

func (m *defaultReplyModel) tableName() string {
	return m.table
}
